generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String?  @unique
  anonId        String?  @unique
  connections   Connection[]
  rules         Rule[]
  budgets       Budget[]
  adviceLogs    AdviceLog[]
  auditLogs     AuditLog[]
  recurringSeries RecurringSeries[]
  insights      Insight[]
}

model Connection {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  itemId        String   @unique
  institution   String
  accessTokenEnc String
  scopes        String[]
  status        String
  revokedAt     DateTime?
  accounts      Account[]
  transactionsCursor String?
  @@index([userId])
}

model Account {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  connection    Connection @relation(fields: [connectionId], references: [id])
  connectionId  String
  accountId     String   @unique
  name          String
  officialName  String?
  mask          String?
  type          String
  subtype       String?
  current       Decimal? @db.Decimal(65, 30)
  available     Decimal? @db.Decimal(65, 30)
  isoCurrency   String?
  transactions  Transaction[]
  @@index([connectionId])
}

model Transaction {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  account       Account  @relation(fields: [accountId], references: [id])
  accountId     String
  plaidTxnId    String   @unique
  name          String
  merchant      String?
  amount        Decimal  @db.Decimal(65, 30)
  isoCurrency   String?
  datePosted    DateTime
  datePending   DateTime?
  pending       Boolean  @default(false)
  originalDesc  String?
  mcc           String?
  hashDedupe    String
  categories    TxnCategory[]
  @@index([accountId, datePosted])
}

model Category {
  id            String   @id @default(cuid())
  name          String
  parentId      String?
  parent        Category? @relation("CategoryToParent", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryToParent")
  txnCategories TxnCategory[]
  @@unique([name, parentId])
}

model TxnCategory {
  id            String   @id @default(cuid())
  txn           Transaction @relation(fields: [txnId], references: [id])
  txnId         String
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  confidence    Int
  source        String
  @@index([txnId])
  @@unique([txnId])
}

model Rule {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  matcher       String
  categoryId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([userId])
}

model RecurringSeries {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  merchant      String
  cadence       String
  amountMean    Decimal  @db.Decimal(65, 30)
  amountStd     Decimal  @db.Decimal(65, 30)
  lastSeen      DateTime
  sampleSize    Int
  @@index([userId, merchant])
}

model Budget {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  period        String
  amount        Decimal  @db.Decimal(65, 30)
  categoryId    String?
  rollover      Boolean  @default(false)
  entries       BudgetEntry[]
  @@index([userId, period])
}

model BudgetEntry {
  id            String   @id @default(cuid())
  budget        Budget   @relation(fields: [budgetId], references: [id])
  budgetId      String
  categoryId    String?
  spent         Decimal  @db.Decimal(65, 30)
}

model Insight {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  type          String
  period        String
  payload       Json
  createdAt     DateTime @default(now())
  @@index([userId, type, period])
}

model AdviceLog {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  insightId     String?
  promptContext Json
  embedding     Float[]
  aiText        String
  provenance    String
  createdAt     DateTime @default(now())
  @@index([userId, insightId])

  // pgvector column for ANN search (optional in Prisma client)
  embeddingVec  Unsupported("vector")? @map("embedding_vec")
}

model AuditLog {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  action        String
  target        String?
  createdAt     DateTime @default(now())
  meta          Json?
  @@index([userId, action])
}
